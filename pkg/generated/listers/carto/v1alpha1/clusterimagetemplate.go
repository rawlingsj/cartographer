/*
Copyright 2021 VMware

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/cartographer/pkg/apis/carto/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterImageTemplateLister helps list ClusterImageTemplates.
// All objects returned here must be treated as read-only.
type ClusterImageTemplateLister interface {
	// List lists all ClusterImageTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterImageTemplate, err error)
	// ClusterImageTemplates returns an object that can list and get ClusterImageTemplates.
	ClusterImageTemplates(namespace string) ClusterImageTemplateNamespaceLister
	ClusterImageTemplateListerExpansion
}

// clusterImageTemplateLister implements the ClusterImageTemplateLister interface.
type clusterImageTemplateLister struct {
	indexer cache.Indexer
}

// NewClusterImageTemplateLister returns a new ClusterImageTemplateLister.
func NewClusterImageTemplateLister(indexer cache.Indexer) ClusterImageTemplateLister {
	return &clusterImageTemplateLister{indexer: indexer}
}

// List lists all ClusterImageTemplates in the indexer.
func (s *clusterImageTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterImageTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterImageTemplate))
	})
	return ret, err
}

// ClusterImageTemplates returns an object that can list and get ClusterImageTemplates.
func (s *clusterImageTemplateLister) ClusterImageTemplates(namespace string) ClusterImageTemplateNamespaceLister {
	return clusterImageTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterImageTemplateNamespaceLister helps list and get ClusterImageTemplates.
// All objects returned here must be treated as read-only.
type ClusterImageTemplateNamespaceLister interface {
	// List lists all ClusterImageTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterImageTemplate, err error)
	// Get retrieves the ClusterImageTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterImageTemplate, error)
	ClusterImageTemplateNamespaceListerExpansion
}

// clusterImageTemplateNamespaceLister implements the ClusterImageTemplateNamespaceLister
// interface.
type clusterImageTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterImageTemplates in the indexer for a given namespace.
func (s clusterImageTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterImageTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterImageTemplate))
	})
	return ret, err
}

// Get retrieves the ClusterImageTemplate from the indexer for a given namespace and name.
func (s clusterImageTemplateNamespaceLister) Get(name string) (*v1alpha1.ClusterImageTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterimagetemplate"), name)
	}
	return obj.(*v1alpha1.ClusterImageTemplate), nil
}
