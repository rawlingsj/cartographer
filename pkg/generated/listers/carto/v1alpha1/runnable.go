/*
Copyright 2021 VMware

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/cartographer/pkg/apis/carto/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunnableLister helps list Runnables.
// All objects returned here must be treated as read-only.
type RunnableLister interface {
	// List lists all Runnables in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Runnable, err error)
	// Runnables returns an object that can list and get Runnables.
	Runnables(namespace string) RunnableNamespaceLister
	RunnableListerExpansion
}

// runnableLister implements the RunnableLister interface.
type runnableLister struct {
	indexer cache.Indexer
}

// NewRunnableLister returns a new RunnableLister.
func NewRunnableLister(indexer cache.Indexer) RunnableLister {
	return &runnableLister{indexer: indexer}
}

// List lists all Runnables in the indexer.
func (s *runnableLister) List(selector labels.Selector) (ret []*v1alpha1.Runnable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Runnable))
	})
	return ret, err
}

// Runnables returns an object that can list and get Runnables.
func (s *runnableLister) Runnables(namespace string) RunnableNamespaceLister {
	return runnableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunnableNamespaceLister helps list and get Runnables.
// All objects returned here must be treated as read-only.
type RunnableNamespaceLister interface {
	// List lists all Runnables in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Runnable, err error)
	// Get retrieves the Runnable from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Runnable, error)
	RunnableNamespaceListerExpansion
}

// runnableNamespaceLister implements the RunnableNamespaceLister
// interface.
type runnableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Runnables in the indexer for a given namespace.
func (s runnableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Runnable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Runnable))
	})
	return ret, err
}

// Get retrieves the Runnable from the indexer for a given namespace and name.
func (s runnableNamespaceLister) Get(name string) (*v1alpha1.Runnable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runnable"), name)
	}
	return obj.(*v1alpha1.Runnable), nil
}
