/*
Copyright 2021 VMware

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/cartographer/pkg/apis/carto/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeliverableLister helps list Deliverables.
// All objects returned here must be treated as read-only.
type DeliverableLister interface {
	// List lists all Deliverables in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Deliverable, err error)
	// Deliverables returns an object that can list and get Deliverables.
	Deliverables(namespace string) DeliverableNamespaceLister
	DeliverableListerExpansion
}

// deliverableLister implements the DeliverableLister interface.
type deliverableLister struct {
	indexer cache.Indexer
}

// NewDeliverableLister returns a new DeliverableLister.
func NewDeliverableLister(indexer cache.Indexer) DeliverableLister {
	return &deliverableLister{indexer: indexer}
}

// List lists all Deliverables in the indexer.
func (s *deliverableLister) List(selector labels.Selector) (ret []*v1alpha1.Deliverable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Deliverable))
	})
	return ret, err
}

// Deliverables returns an object that can list and get Deliverables.
func (s *deliverableLister) Deliverables(namespace string) DeliverableNamespaceLister {
	return deliverableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeliverableNamespaceLister helps list and get Deliverables.
// All objects returned here must be treated as read-only.
type DeliverableNamespaceLister interface {
	// List lists all Deliverables in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Deliverable, err error)
	// Get retrieves the Deliverable from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Deliverable, error)
	DeliverableNamespaceListerExpansion
}

// deliverableNamespaceLister implements the DeliverableNamespaceLister
// interface.
type deliverableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Deliverables in the indexer for a given namespace.
func (s deliverableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Deliverable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Deliverable))
	})
	return ret, err
}

// Get retrieves the Deliverable from the indexer for a given namespace and name.
func (s deliverableNamespaceLister) Get(name string) (*v1alpha1.Deliverable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deliverable"), name)
	}
	return obj.(*v1alpha1.Deliverable), nil
}
