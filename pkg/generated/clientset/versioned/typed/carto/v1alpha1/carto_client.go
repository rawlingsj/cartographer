/*
Copyright 2021 VMware

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/cartographer/pkg/apis/carto/v1alpha1"
	"github.com/vmware-tanzu/cartographer/pkg/generated/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type CartoV1alpha1Interface interface {
	RESTClient() rest.Interface
	ClusterConfigTemplatesGetter
	ClusterDeliveriesGetter
	ClusterDeploymentTemplatesGetter
	ClusterImageTemplatesGetter
	ClusterRunTemplatesGetter
	ClusterSourceTemplatesGetter
	ClusterSupplyChainsGetter
	ClusterTemplatesGetter
	DeliverablesGetter
	WorkloadsGetter
}

// CartoV1alpha1Client is used to interact with features provided by the carto.run group.
type CartoV1alpha1Client struct {
	restClient rest.Interface
}

func (c *CartoV1alpha1Client) ClusterConfigTemplates(namespace string) ClusterConfigTemplateInterface {
	return newClusterConfigTemplates(c, namespace)
}

func (c *CartoV1alpha1Client) ClusterDeliveries(namespace string) ClusterDeliveryInterface {
	return newClusterDeliveries(c, namespace)
}

func (c *CartoV1alpha1Client) ClusterDeploymentTemplates(namespace string) ClusterDeploymentTemplateInterface {
	return newClusterDeploymentTemplates(c, namespace)
}

func (c *CartoV1alpha1Client) ClusterImageTemplates(namespace string) ClusterImageTemplateInterface {
	return newClusterImageTemplates(c, namespace)
}

func (c *CartoV1alpha1Client) ClusterRunTemplates(namespace string) ClusterRunTemplateInterface {
	return newClusterRunTemplates(c, namespace)
}

func (c *CartoV1alpha1Client) ClusterSourceTemplates(namespace string) ClusterSourceTemplateInterface {
	return newClusterSourceTemplates(c, namespace)
}

func (c *CartoV1alpha1Client) ClusterSupplyChains(namespace string) ClusterSupplyChainInterface {
	return newClusterSupplyChains(c, namespace)
}

func (c *CartoV1alpha1Client) ClusterTemplates(namespace string) ClusterTemplateInterface {
	return newClusterTemplates(c, namespace)
}

func (c *CartoV1alpha1Client) Deliverables(namespace string) DeliverableInterface {
	return newDeliverables(c, namespace)
}

func (c *CartoV1alpha1Client) Workloads(namespace string) WorkloadInterface {
	return newWorkloads(c, namespace)
}

// NewForConfig creates a new CartoV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*CartoV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &CartoV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new CartoV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *CartoV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new CartoV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *CartoV1alpha1Client {
	return &CartoV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *CartoV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
